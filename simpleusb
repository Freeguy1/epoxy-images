#!/bin/bash
#
# simpleusb generates a UEFI boot image suitable for USB images.

set -uex

# Optional parameters.
INITRAMFS=
BOOT_PARAMS=

# Constants
FREE_SPACE_K=4096
boot_params=
initramfs_config=


function help() {
  echo "usage: ${0} [OPTIONS] vmlinuz usbname"
  echo
  echo "where OPTIONS are:"
  echo " -h       show this help"
  echo " -i FILE  initramfs filesystem image for kernel"
  echo " -x ARGS  extra kernel command line args"
}


# Parse command line parameters.
while getopts "hi:x:" opt; do
  case ${opt} in
    h)
      help
      exit 0
      ;;
    i)
      INITRAMFS="${OPTARG}"
      ;;
    x)
      BOOT_PARAMS="${OPTARG}"
      ;;
  esac
done

# Adjust positional parameters after processing with getopts.
shift $((OPTIND - 1))

# Assign positional parameters.
VMLINUZ=${1:?Error: Please provide a vmlinuz image}
USB_NAME=${2:?Error: Please provide a USB output file name}


function setup_usbfs() {
  local usbfs_dir=$1
  local vmlinuz=$2
  local initramfs=$3
  local boot_params=$4

  local initramfs_config=

  # Setup the filesystem.
  cp $vmlinuz ${usbfs_dir}/vmlinuz.efi
  if test -f "$initramfs" ; then
      cp $initramfs ${usbfs_dir}/initramfs
      initramfs_config_efi="initrdefi /efi/boot/initramfs"
  fi

  # Generate default grub config using images and boot params.
  cat >$usbfs_dir/grub.cfg<<EOF
set timeout=5
set color_highlight=black/light-magenta

menuentry 'stage1: ${USB_NAME}' {
    linuxefi /efi/boot/vmlinuz.efi $boot_params
    $initramfs_config_efi
}
menuentry 'Firmware Setup' {
    fwsetup
}
EOF

}

function make_efi_usb() {
  local usbdir=$1
  local usbfile=$2
  local tmp=$( mktemp --directory )

  local raw_size_k=$(
    du --dereference --summarize  --block-size=1K ${usbdir} \
      | awk '{ print $1; }'
  )
  local size=$(( $raw_size_k + $FREE_SPACE_K ))

  # Creates an empty disk image.
  truncate --size ${size}K ${usbfile}

  # Format as GPT image with one fat16 partition.
  parted ${usbfile} \
    mktable gpt \
    mkpart primary fat16 2048s 100% \
    name 1 UEFI \
    quit

  # Create a device map for the partition in ${usbfile}.
  # -s = synchronous mode.
  # -a = add partition map
  # -v = verbose
  device=$( kpartx -s -av ${usbfile} | awk '{print $3}' )

  # Format the disk image as FAT16. Note: min fat32 disk size is 256MB.
  mkfs.vfat /dev/mapper/${device} -F16

  # Release the device map.
  # -s = synchronous mode.
  # -d = delete partition map
  # -v = verbose
  kpartx -s -dv ${usbfile}

  export MTOOLS_SKIP_CHECK=1
  # 2048s(ectors) == 1M.
  local offset=1048576

  # Creates the necessary subdirectories.
  mmd -i ${usbfile}@@${offset} ::/efi
  mmd -i ${usbfile}@@${offset} ::/efi/boot

  # Make the efi boot loader.
  grub-mkimage -o bootx64.efi -p /efi/boot -O x86_64-efi fat iso9660 part_gpt \
      part_msdos  normal boot linux linuxefi efinet lsefi lsefisystab lsefimmap configfile loopback chain efifwsetup efi_gop \
      efi_uga ls search search_label search_fs_uuid search_fs_file gfxterm \
      gfxterm_background gfxterm_menu test all_video loadenv exfat ext2 ntfs udf

  # NB: for i386 one can use:
  # grub-mkimage -o bootia32.efi -p /efi/boot -O i386-efi ...

  echo -n " Copying files to USB image... "
  mcopy -bsQ -i ${usbfile}@@${offset} bootx64.efi ::/efi/boot
  mcopy -bsQ -i ${usbfile}@@${offset} "${usbdir}"/* ::/efi/boot
}

function main() {
  local usbdir=$( mktemp -d /tmp/usb.dir.XXXXXX )

  setup_usbfs ${usbdir} ${VMLINUZ} "${INITRAMFS}" "${BOOT_PARAMS}"

  # Generate the USB image.
  make_efi_usb "${usbdir}" "${USB_NAME}"

  # Clean up temporary directory.
  rm -fr "${usbdir}"
}

main
